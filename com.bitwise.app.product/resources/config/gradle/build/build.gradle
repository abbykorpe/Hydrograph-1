apply plugin: 'java'
sourceCompatibility = 1.7
version = '1.0'

repositories {
    maven {
        url "http://10.30.127.67:9091/artifactory/libs-release"
    }
}


configurations {
    sshAntTask
}
configurations {
    compile
}

dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.9.4'
}

sourceSets {
    main {
        java.srcDir 'src'
    }
}

Properties properties = new Properties()
def buildProperty = project.projectDir.path + '/build.properties'
File propertiesFile = new File(buildProperty)
propertiesFile.withInputStream {
    properties.load(propertiesFile.newDataInputStream())
}

ext.cascadingVersion = '3.0.1'
ext.hadoopVersion = '2.6.0'
ext.hiveVersion = '1.2.0'

dependencies {
    compile(group: 'com.bitwiseglobal', name: 'elt-command-line', version: '0.1.2')
    compile(group: 'org.jgrapht', name: 'jgrapht-ext', version: '0.9.1')
}

test {
    testLogging.showStandardStreams = true
}


task scpJarFiles(dependsOn: ['build']) {

    doLast {
        println 'Copying library files...'

        ant.taskdef(
                name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.sshAntTask.asPath)

        def jarFile
        def jarName
        def jarFiles = files {
            file(project.libsDir.path).listFiles()
        }

        jarFiles.each {
            File file ->
                jarFile = file.absolutePath
                jarName = file.name
        }

        try {
            ant.scp(
                    file: jarFile,
                    todir: "${username}@${host}:" + properties.remoteLibDir,
                    password: password,
                    trust: true,
            )
        } catch (Exception gradleException) {
            println '#Gradle failed to execute task#'
        }


    }
}

scpJarFiles.onlyIf {
    project.hasProperty('host')
    project.hasProperty('username')
    project.hasProperty('password')
}

task scpJobXML() {
    doLast {
        ant.taskdef(
                name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.sshAntTask.asPath)


        println 'Copying XML files...'

        try {

            ant.scp(
                    file: jobXML,
                    todir: "${username}@${host}:" + properties.remoteJobXMLDir,
                    password: password,
                    trust: true,
            )

            if(project.hasProperty('debugJobXML'))
            {
                ant.scp(
                        file: debugJobXML,
                        todir: "${username}@${host}:" + properties.remoteJobXMLDir,
                        password: password,
                        trust: true,
                )
            }
        } catch (Exception gradleException) {
            println '#Gradle failed to execute task#'
        }



    }
}

scpJobXML.onlyIf {
    project.hasProperty('host')
    project.hasProperty('username')
    project.hasProperty('password')
    project.hasProperty('jobXML');
}

task scpParameterFile() {
    doLast {
        println 'Copying Parameter files...'
        ant.taskdef(
                name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.sshAntTask.asPath)
        try {

            def parameterFiles = parameterFile.split(',');

            for(int i = 0; i < parameterFiles.length; i++){
                println 'copying parameter file: ' + parameterFiles[i];
                ant.scp(
                        file: parameterFiles[i],
                        todir: "${username}@${host}:" + properties.remoteParameterFileDir,
                        password: password,
                        trust: true,
                )
            }


        } catch (Exception gradleException) {
            println '#Gradle failed to execute task#'
        }

    }
}

scpParameterFile.onlyIf {
    project.hasProperty('host')
    project.hasProperty('username')
    project.hasProperty('password')
    project.hasProperty('parameterFile');
}


task executeRemoteJob() {
    doLast {
        ant.taskdef(
                name: 'sshexec',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.sshAntTask.asPath)

        println "Executing remote job..."

        def jarFile
        def jarName
        def jarFiles = files {
            file(project.libsDir.path).listFiles()
        }

        jarFiles.each {
            File file ->
                jarFile = file.absolutePath
                jarName = file.name
        }


        def xmlFileName = jobXML.substring(jobXML.lastIndexOf("/") + 1);
        //def parameterFileName = parameterFile.substring(parameterFile.lastIndexOf("/") + 1);
        def parameterFiles = parameterFile.split(',');
        def unixParameterFileList = "";
        for(int i = 0; i < parameterFiles.length; i++){
         	def unixParameterFileName = parameterFiles[i].substring(parameterFiles[i].replaceAll("\\\\","/").lastIndexOf("/") + 1);
         	println "+++ unixParameterFileName: " + unixParameterFileName; 
            unixParameterFileList= unixParameterFileList + properties.remoteParameterFileDir + "/" + unixParameterFileName + ",";
        }

        unixParameterFileList=unixParameterFileList.substring(0, unixParameterFileList.length() - 1);

        println 'executing command - ' + properties.runUtility + " -xmlpath " + properties.remoteJobXMLDir + "/" + xmlFileName + " -libjars " + properties.remoteLibDir + "/" + jarName + " -paramfiles " + unixParameterFileList

        try {
            ant.sshexec(
                    host: host,
                    username: username,
                    password: password,
                    trust: true,
                    command: properties.runUtility + " -xmlpath " + properties.remoteJobXMLDir + "/" + xmlFileName + " -libjars " + properties.remoteLibDir + "/" + jarName + " -paramfiles " + unixParameterFileList
            )
        } catch (Exception gradleException) {
            println '#Gradle failed to execute task#'
        }

    }
}

executeRemoteJob.onlyIf {
    project.hasProperty('host')
    project.hasProperty('username')
    project.hasProperty('password')
    project.hasProperty('jobXML')
    project.hasProperty('parameterFile');
}


task executeDebugRemoteJob() {

    doLast {

        ant.taskdef(
                name: 'sshexec',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.sshAntTask.asPath)

        println "Executing debug remote job..."

        def jarFile
        def jarName
        def jarFiles = files {
            file(project.libsDir.path).listFiles()
        }

        jarFiles.each {
            File file ->
                jarFile = file.absolutePath
                jarName = file.name
        }

        def xmlFileName = jobXML.substring(jobXML.lastIndexOf("/") + 1);
        def parameterFileName = parameterFile.substring(parameterFile.lastIndexOf("/") + 1);
        def debugXmlFileName = debugJobXML.substring(debugJobXML.lastIndexOf("/") + 1);
        def jobId = jobId;
        def basePath = basePath;

        println 'executing command - ' + properties.runUtility + " -xmlpath " + properties.remoteJobXMLDir + "/" + xmlFileName + " -libjars " +
                properties.remoteLibDir + "/" + jarName + " -paramfiles " + properties.remoteParameterFileDir + "/" + parameterFileName + " -debugxmlpath " +
                properties.remoteJobXMLDir + "/" + debugXmlFileName + " -jobid " + jobId + " -basepath " + basePath

        try {
            ant.sshexec(
                    host: host,
                    username: username,
                    password: password,
                    trust: true,
                    command: properties.runUtility + " -xmlpath " + properties.remoteJobXMLDir + "/" + xmlFileName + " -libjars " + properties.remoteLibDir +
                            "/" + jarName + " -paramfiles " + properties.remoteParameterFileDir + "/" + parameterFileName + " -debugxmlpath " + properties.remoteJobXMLDir +
                            "/" + debugXmlFileName + " -jobid " + jobId + " -basepath " + basePath
            )
        } catch (Exception gradleException) {
            println '#Gradle failed to execute task#'
        }

    }
}

task executeLocalJob(dependsOn: ['build', 'classes'], type: JavaExec) {

    if(project.hasProperty('localjob')){
        def mainClassName = 'com.bitwiseglobal.commandline.utilities.BHSExecution'
        def transformFiles = files { file(project.libsDir.path).listFiles() }

        println 'Executing local job'
        main = mainClassName
        standardOutput = System.out
        errorOutput = System.err
        classpath += transformFiles + configurations.compile
        def argsArray = getArgsForRunJob()
        args=[''+argsArray[0]+'',''+argsArray[1]+'',''+argsArray[2]+'',''+argsArray[3]+'']

    }
}

def getArgsForRunJob() {
    def argsArray = new String[10]
    if (project.hasProperty("jobXML")) {
        argsArray[0] = "-xmlpath"
        argsArray[1] = jobXML
    }
    if (project.hasProperty("parameterFile")) {
        argsArray[2] = "-paramFiles"
        argsArray[3] = parameterFile
    }
    return argsArray
}

executeLocalJob.onlyIf {
    project.hasProperty('jobXML')
    project.hasProperty('parameterFile')
    project.hasProperty('localjob');
}

task executeDebugLocal (dependsOn: ['build', 'classes'], type: JavaExec) {

    if(project.hasProperty('localjob')){
        def mainClassName = 'com.bitwiseglobal.commandline.utilities.BHSExecution'
        def transformFiles = files { file(project.libsDir.path).listFiles() }

        println 'Executing Debug local job'
        main = mainClassName
        standardOutput = System.out
        errorOutput = System.err
        classpath += transformFiles + configurations.compile
        def argsArray = getArgsForDebugRunJob()
        args=[''+argsArray[0]+'',''+argsArray[1]+'',''+argsArray[2]+'',''+argsArray[3]+'',''+argsArray[4]+'',''+argsArray[5]+'',''+argsArray[6]+'',''+argsArray[7]+'',''+
                argsArray[8]+'',''+argsArray[9]+'']

    }
}

def getArgsForDebugRunJob() {
    def argsArray = new String[10]
    if (project.hasProperty("jobXML")) {
        argsArray[0] = "-xmlpath"
        argsArray[1] = jobXML
        println jobXML
    }

    if (project.hasProperty("parameterFile")) {
        argsArray[2] = "-paramFiles"
        argsArray[3] = parameterFile
    }

    if(project.hasProperty("debugJobXML")){
        argsArray[4] = "-debugxmlpath"
        argsArray[5] = debugJobXML
        println debugJobXML
    }

    if(project.hasProperty("jobId")){
        argsArray[6] = "-jobid"
        argsArray[7] = jobId
        println jobId
    }

    if(project.hasProperty("basePath")){
        argsArray[8] = "-basepath"
        argsArray[9] = basePath
        println basePath
    }

    return argsArray
}


task killRemoteJob() << {

    if(jobprocessid !=null){
        println "Gradle is Killing remote job"
        ant.taskdef(
                name: 'sshexec',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.sshAntTask.asPath)

        ant.sshexec(
                host: host,
                username: username,
                password: password,
                trust: true,
                command: "sh /home/hduser/milestone/kill_job.sh " + jobprocessid)
    }

}

killRemoteJob.onlyIf {
    project.hasProperty('host')
    project.hasProperty('username')
    project.hasProperty('password')
    project.hasProperty('jobprocessid');
}