apply plugin: 'java'
sourceCompatibility = 1.7
version = '1.0'
ext.cascadingVersion = '3.0.1'
ext.hadoopVersion = '2.6.0'
ext.hiveVersion = '1.2.0'


def mainClassName='com.bitwiseglobal.bhse.utilities.BHSExecution'
repositories {
	maven {
    	url "http://10.30.127.67:9091/artifactory/libs-release-local"
    }
  mavenLocal() 
  mavenCentral() 
  maven {
    url 'http://conjars.org/repo/'
	}
  maven {
    url 'http://maven.twttr.com/'
	}
 
      
}  
configurations {
 compile
}
 sourceSets {
  main {
		java.srcDir 'src'
  } 
  }
dependencies {
  compile(group: 'elt-bhs', name: 'elt-bhs', version: 'elt-bhs')
  compile group: 'cascading', name: 'cascading-core', version: cascadingVersion
  compile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion //required for plunger
  compile group: 'cascading', name: 'cascading-local', version: cascadingVersion //required for plunger
  compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion //required for plunger
  compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-common', version: hadoopVersion
  compile group: 'cascading', name: 'cascading-hive', version: '2.0.0'
  compile (group: 'org.apache.hive', name: 'hive-exec', version: hiveVersion) 
  {exclude group: 'com.google.guava'
  exclude group: 'org.apache.curator'
  }
  compile 'com.google.guava:guava:14.0.1'
  compile 'org.slf4j:slf4j-api:1.7.2' 
  testCompile 'junit:junit:4.11'
  testCompile 'com.hotels:plunger:2.1.1'
  compile 'com.twitter:parquet-cascading:1.6.0'
  compile 'com.twitter:parquet-hadoop:1.6.0'
  compile 'com.twitter:parquet-column:1.6.0'
  compile 'org.fluttercode.datafactory:datafactory:0.8'
  compile 'org.hamcrest:hamcrest-core:1.3' //required by plunger
  testCompile 'org.mockito:mockito-core:1.9.5' //required by plunger
  testCompile 'commons-io:commons-io:2.4' //required by plunger
}

test {
     testLogging.showStandardStreams = true
} 

def jarFiles = files {file(project.libsDir.path).listFiles() }

//get property files  	
def propertyFiles= files { file('C:/Users/rahulma/Desktop/bhs/config/java/').listFiles() } 
	

task(run, dependsOn: ['build','classes'], type: JavaExec){
		    main=mainClassName
	   		standardOutput = System.out
  			errorOutput = System.err
			classpath += jarFiles+configurations.compile
			if (project.hasProperty("xmlPath")) {
      			args = ["-xmlpath",xmlPath]
  			}	
		  	propertyFiles.each {File file ->
			   systemProperty file.name, file.absolutePath
			} 
}
